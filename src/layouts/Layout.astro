---
import NavBar from '../components/ui/NavBar.astro';
import '../styles/global.css';
---

<!doctype html>
<html lang="en" class="bg-white-custom">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link
      rel="stylesheet"
      href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
      integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
      crossorigin=""
    />
    <meta name="generator" content={Astro.generator} />
    <title>Astro Basics</title>
  </head>
  <body class="font-text">
    <NavBar />
    <slot />
  </body>
</html>

<style>
  html,
  body {
    margin: 0;
    width: 100%;
    height: 100%;
    scroll-behavior: smooth;
  }
  html {
    overflow-x: hidden;
  }
  .fade-element-in-viewport {
    opacity: 0;
  }
</style>
<script>
  import { animate } from 'animejs';

  // The containers that have the elements to animate when it enter the viewport
  const containerFadeElements = document.querySelectorAll(
    '.container-fade-animation'
  );

  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        // Take elements to animate whit fade in-out animation
        const elementsToAnimate = entry.target.querySelectorAll(
          '.fade-element-in-viewport'
        );
        // Take elements to animate whit slide in-out animation
        const elementsToSlide = entry.target.querySelectorAll(
          '.slide-element-in-viewport'
        );
        if (entry.isIntersecting) {
          // Fade in the elements when its container enter the viewport
          elementsToAnimate.forEach((el) => {
            animate(el, {
              opacity: [0, 1],
              // translateY: [-10, 0],
              duration: 600,
              delay: 100,
            });
          });
        } else {
          // Fade out the element when its container leave the viewport
          elementsToAnimate.forEach((el) => {
            animate(el, {
              opacity: [1, 0],
              // translateY: [0, 10],
              duration: 800,
              delay: 300,
            });
          });
        }
      });
    },
    { threshold: 0.7 }
  );

  if (containerFadeElements) {
    containerFadeElements.forEach((el) => {
      observer.observe(el);
    });
  }
</script>
